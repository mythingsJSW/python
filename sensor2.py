import math
import matplotlib.pyplot as plt

def rotate_point(x, y, angle):
    rad = math.radians(angle)
    x_rot = x * math.cos(rad) - y * math.sin(rad)
    y_rot = x * math.sin(rad) + y * math.cos(rad)
    return x_rot, y_rot

def rotate_and_visualize(angles, ranges, rotation_angle_input, angle_offset):
    x_coords = []
    y_coords = []
    for angle, r in zip(angles, ranges):
        adjusted_angle = angle + rotation_angle_input
        rad = math.radians(adjusted_angle)
        x = r * math.cos(rad)
        y = r * math.sin(rad)
        x_coords.append(x)
        y_coords.append(y)

    right_x, right_y = [], []
    left_x, left_y = [], []

    for x, y in zip(x_coords, y_coords):
        if x >= 0:
            right_x.append(x)
            right_y.append(y)
        else:
            left_x.append(x)
            left_y.append(y)

    rotated_right_x, rotated_right_y = [], []
    for x, y in zip(right_x, right_y):
        x_rot, y_rot = rotate_point(x, y, -angle_offset)
        rotated_right_x.append(x_rot)
        rotated_right_y.append(y_rot)

    rotated_left_x, rotated_left_y = [], []
    for x, y in zip(left_x, left_y):
        x_rot, y_rot = rotate_point(x, y, angle_offset)
        rotated_left_x.append(x_rot)
        rotated_left_y.append(y_rot)

    final_x = rotated_left_x + rotated_right_x
    final_y = rotated_left_y + rotated_right_y

    return final_x, final_y

def visualize_data(x, y, ranges, angle_offset):
    plt.figure(figsize=(8, 8))
    plt.scatter(x, y, c='blue', label='Rotated Data')

    line_length = max(ranges) + 2
    left_limit = -32.5
    right_limit = 32.5
    x_left = line_length * math.sin(math.radians(left_limit))
    y_left = line_length * math.cos(math.radians(left_limit))
    x_right = line_length * math.sin(math.radians(right_limit))
    y_right = line_length * math.cos(math.radians(right_limit))

    plt.plot([0, x_left], [0, y_left], 'r-', label=f'Left {left_limit}° Line')
    plt.plot([0, x_right], [0, y_right], 'r-', label=f'Right {right_limit}° Line')

    plt.title(f"LiDAR Data Visualization with Offset {angle_offset}°")
    plt.xlabel("X Coordinate")
    plt.ylabel("Y Coordinate")
    plt.axhline(0, color='black', linewidth=0.8)
    plt.axvline(0, color='black', linewidth=0.8)
    plt.grid(True)
    plt.legend()

    max_range = max(max(abs(val) for val in x), max(abs(val) for val in y))
    margin = 0.2 * max_range
    plt.xlim(-max_range - margin, max_range + margin)
    plt.ylim(-max_range - margin, max_range + margin)

    output_file = "lidar_visualized_data.png"
    plt.savefig(output_file)
    print(f"시각화된 데이터가 {output_file}에 저장되었습니다.")
    plt.show()

if __name__ == "__main__":
    angles= [36.115, 0.0, 36.205, 36.496, 36.785000000000004, 37.071, 37.356, 37.639, 37.92, 38.2, 39.027, 39.299, 39.57, 39.839, 40.106, 40.372, 40.637, 40.9, 41.162, 41.422000000000004, 41.681, 41.939, 42.195, 42.45, 42.704, 42.957, 43.208, 43.459, 43.708, 43.957, 44.204, 44.45, 44.696, 44.94, 45.184, 45.426, 45.668, 45.909, 46.149, 46.388, 46.627, 46.865, 47.102000000000004, 47.338, 47.574, 47.809, 48.043, 48.277, 48.51, 48.742000000000004, 48.974000000000004, 49.206, 49.436, 49.667, 49.897, 50.126, 50.355000000000004, 50.584, 50.812, 51.039, 51.266, 51.493, 51.72, 51.946, 52.172000000000004, 52.397, 52.622, 52.847, 53.072, 53.296, 53.52, 53.743, 53.967, 54.19, 54.413000000000004, 54.636, 54.858000000000004, 55.08, 55.303000000000004, 55.524, 55.746, 55.968, 56.189, 56.410000000000004, 56.631, 56.852000000000004, 57.073, 57.294000000000004, 57.514, 57.735, 57.955, 58.175000000000004, 58.395, 58.615, 58.835, 59.055, 59.275, 59.495000000000005, 59.714, 59.934000000000005, 60.153, 60.373000000000005, 60.592, 60.811, 61.031, 61.25, 61.469, 61.688, 61.907000000000004, 62.126000000000005, 62.346000000000004, 62.565000000000005, 62.784, 63.003, 63.222, 63.441, 63.660000000000004, 63.879, 64.098, 64.31700000000001, 64.536, 64.755, 64.974, 65.193, 65.412, 0.095, 0.314, 0.533, 0.752, 0.971, 1.191, 1.41, 1.629, 1.849, 2.068, 2.287, 2.507, 2.726, 2.946, 3.166, 3.3850000000000002, 3.605, 3.825, 4.045, 4.265, 4.485, 4.706, 4.926, 5.146, 5.367, 5.588, 5.808, 6.029, 6.25, 6.471, 6.6930000000000005, 6.914, 7.136, 7.3580000000000005, 7.58, 7.8020000000000005, 8.024000000000001, 8.247, 8.469, 8.692, 8.915000000000001, 9.139, 9.362, 9.586, 9.81, 10.035, 10.259, 10.484, 10.709, 10.935, 11.161, 11.387, 11.613, 11.84, 12.067, 12.295, 12.523, 12.751, 12.98, 13.209, 13.439, 13.669, 13.899000000000001, 14.131, 14.362, 14.594, 14.827, 15.06, 15.294, 15.528, 15.763, 15.999, 16.235, 16.472, 16.71, 16.948, 17.188, 17.428, 17.668, 17.91, 18.152, 18.395, 18.639, 18.884, 19.13, 19.377, 19.625, 19.874, 20.124, 20.375, 20.627, 20.88, 21.134, 21.39, 21.646, 21.904, 22.164, 22.424, 22.686, 22.949, 23.214000000000002, 23.48, 23.748, 24.017, 24.288, 24.560000000000002, 24.834, 25.11, 25.387, 25.667, 25.948, 26.23, 26.515, 26.802, 27.09, 27.381, 27.968, 28.265, 28.564]
    ranges= [0.0016, 0.0256, 3.1512000000000002, 3.2031, 3.2329000000000003, 3.2501, 3.2816, 3.3191, 3.3691, 3.3902, 2.6661, 3.5582000000000003, 3.567, 2.6831, 2.7542, 2.7407, 2.6649000000000003, 2.6203000000000003, 2.6109, 2.6297, 2.6207000000000003, 2.6243000000000003, 2.6305, 2.6186000000000003, 2.6054, 2.6109, 2.6017, 2.6145, 2.6285000000000003, 2.6301, 2.6472, 2.6354, 2.6561, 2.8968000000000003, 2.9290000000000003, 2.7956000000000003, 2.7823, 2.7054, 2.5847, 2.5786000000000002, 2.5274, 2.5311, 2.5378000000000003, 2.5573, 2.5714, 2.5888, 2.5268, 2.4872, 2.4903, 2.5314, 2.5767, 2.5845000000000002, 2.5387, 2.5172000000000003, 2.4850000000000003, 2.4563, 2.4502, 2.4491, 2.5814, 2.6009, 2.599, 2.5935, 2.58, 2.5684, 2.5536000000000003, 2.5660000000000003, 4.2381, 4.2296000000000005, 4.2413, 4.242900000000001, 4.2247, 4.2099, 4.2451, 4.219, 4.2366, 4.1958, 4.2171, 4.2138, 4.2010000000000005, 4.1927, 4.1736, 4.1917, 4.2026, 4.203, 4.1833, 4.1913, 4.2097, 4.3874, 4.5743, 4.7935, 5.0105, 5.278300000000001, 5.520700000000001, 5.8232, 6.1715, 6.4857000000000005, 6.7172, 6.7832, 7.100300000000001, 7.104, 7.1131, 7.1048, 4.809200000000001, 4.8062000000000005, 5.8033, 6.9354000000000005, 7.0918, 7.0896, 7.1001, 7.098000000000001, 7.098800000000001, 7.0983, 7.0959, 7.107, 7.099200000000001, 7.1098, 7.1046000000000005, 7.102, 7.0986, 7.107600000000001, 7.1117, 7.098800000000001, 7.114400000000001, 7.1204, 7.1244000000000005, 7.116300000000001, 7.1639, 7.5314000000000005, 7.5518, 7.560300000000001, 7.565600000000001, 7.5536, 7.553, 7.556100000000001, 7.562200000000001, 7.5594, 7.5548, 7.5785, 7.5758, 7.5722000000000005, 7.5732, 7.5796, 7.58, 7.590000000000001, 7.5888, 7.593800000000001, 7.6092, 7.5964, 7.620100000000001, 7.6142, 7.6203, 7.627000000000001, 7.6253, 7.6417, 7.6372, 7.633900000000001, 7.6561, 7.6554, 7.6653, 7.6633000000000004, 7.6751000000000005, 7.676, 7.6881, 7.688000000000001, 7.691800000000001, 7.708500000000001, 7.7081, 7.722, 7.7312, 7.720000000000001, 7.715400000000001, 7.7321, 7.694400000000001, 7.6082, 5.4504, 5.3955, 5.3763000000000005, 5.3407, 5.3536, 5.334700000000001, 5.3319, 5.3163, 5.3295, 5.3363000000000005, 5.342700000000001, 5.3581, 5.3817, 5.415100000000001, 5.4808, 5.5151, 5.5602, 5.5008, 5.4173, 5.3581, 5.295, 5.219600000000001, 5.157900000000001, 5.0924000000000005, 5.027200000000001, 4.9622, 4.9002, 4.8394, 4.7885, 4.7426, 4.7325, 4.7533, 4.7371, 4.6581, 4.6253, 4.6389000000000005, 4.6778, 4.6669, 4.684, 4.8002, 4.8147, 4.833200000000001, 4.8348, 4.6801, 4.5075, 4.4979000000000005, 4.4926, 4.494800000000001, 4.5086, 4.78, 4.8632, 4.823300000000001, 4.8887, 4.8166, 4.6811, 4.738, 4.7584, 4.9207, 5.0193, 5.0366, 5.0516000000000005, 5.0258, 5.0106, 5.0532, 5.077500000000001, 4.9587, 5.0441, 5.053, 5.0455000000000005, 5.0166]
    
    rotation_angle_input = 60
    angle_offset = -32.5
    final_x, final_y = rotate_and_visualize(angles, ranges, rotation_angle_input, angle_offset)
    visualize_data(final_x, final_y, ranges, angle_offset)
